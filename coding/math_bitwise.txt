
Prime number:
	Check whether a number is prime or not:
			if (num < 2 || num % 2 == 0) return 0;
	    	if (num == 2) return 1;
	    	for (int i = 3; i <= sqrt(num); i += 2) {
	        	if (num % i == 0)
	            	return 0;
	    	}
	    	return 1;

	Print prime numbers upto given number n(Sieve of Eratosthenes):
			if(n < 2) return 0;
	        if(n < 5) return (n - 2);
	        vector<bool> is_prime(n, true);
	        int cnt = n/2;
	        for(int i = 3; i * i < n; i+=2) {
	            for(int j = i * i; j < n; j += i*2) {
	                if(is_prime[j]) {
	                    is_prime[j] = false;
	                    --cnt;
	                }
	            }
	        }
	        return cnt;

GCD(Greatest common divisor):
	GCD of 2 numbers, Euclidâ€™s algorithm:
			while(min_val > 0) {
	            int hold_val = min_val;
	            min_val = max_val % min_val;
	            max_val = hold_val;
	        }
	        return max_val;

LCM(Least common multiple):
	LCM of 2 numbers: (a * b)/GCD(a, b);

Square root:
	    if(x == 0 || x == 1) return x;
        int32_t start = 1;
        int32_t end = x;
        int32_t mid;
        while(start <= end) {
            mid = start + (end - start)/2;
            int64_t square = (int64_t)mid * (int64_t)mid;
            if(square == x) {
                return mid;
            } else if(square > x) {
                end = mid - 1;
            } else if(square < x) {
                start = mid + 1;
            }
        }
        return end;

Add fractions:
		add or subtract Fractions(int[] a, int[] b) {
	  	int denom = LCM(a[1], b[1]);
	  	int[] c = {(denom / a[1]) * a[0] +/- (denom / b[1]) * b[0], denom};
	  	return c;
		}

Reduce fraction to its simplest form:
		reduceFraction(int[] a) {
	  		int b = GCD(a[0], a[1]);
	  		a[0] /= b;
	  		a[1] /= b;


Add 2 numbers without using + and -
	1) log2(pow(2, a) * pow(2, b));
	2) do { carry = (a & b) << 1; a = a ^ b; b = carry;}while(carry);

Kadane's algorithm:
	Used to calculate max prefix sum with negative integers.
	for(int n : nums) { currSum = max(0, currSum + nums); maxSum = max(maxSum, currSum);}

Matrix Multiplication:
	COL1 and ROW2 should be same.
	for (int i = 0; i < ROW1; i++) {
        for (int j = 0; j < COL2; j++) {
            C[i][j] = 0; // Initialize result matrix cell
            for (int k = 0; k < COL1; k++) { // OR k < ROW2
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }

Overlapping rectangles: Separate Axis theorem
	if (r1.x2 <= r2.x1 || r2.x2 <= r1.x1 ||  // No horizontal overlap
        r1.y1 >= r2.y2 || r2.y1 >= r1.y2) {  // No vertical overlap
        return false;
    }
    return true;

Quick way to create mask: ((1 << start) - 1) ^ ((1 << (end + 1)) - 1)


