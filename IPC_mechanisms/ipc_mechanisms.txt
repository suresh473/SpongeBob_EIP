IPC mechanisms

C++ APIs for thread creation, mutex, semaphores:
	Threads:
		void task1(string msg)
		{
		cout << "task1 says: " << msg; 
		}
		int main() {
		thread t1(task1, "Hello");
		t1.join();
		}
	Mutex:
		mutex mtx;
		mtx.lock();
		mtx.unlock();
		mutex.try_lock(): returns true if lock is available and locks, else returns false.
		std::lock_guard<std::mutex> guard(g_pages_mutex);
	Semaphores:
		binary_semaphore sem(1); // Initialize with a count of 1 (binary)
		counting_semaphore<10> sem(3); // Initialize semaphore with a count of 3
		sem.acquire();
		sem.release();
		sem.try_acquire();
		sem.try_acquire_for(std::chrono::seconds(1))


Can binary semaphore be used as mutex:
	Yes: Mutual exclusion, task synchronization, binary semaphore can be given from an ISR routine(not wait).
	No: Ownership(Any task can release a semaphore), Priority inversion(by setting PTHREAD_PRIO_INHERIT attribute), recursive locks(PTHREAD_MUTEX_RECURSIVE attribute).


Posix APIs for threads, mutex, condition variables, semaphores:
	pthread_t thread_handle;
	pthread_create(&thread_handle, NULL, thread_func, NULL); // thread_handle pointer to be sent.
	pthread_join(thread_handle, NULL);
	pthread_detach(thread_handle); // No need to call join
	pthread_exit(NULL); // To be called in thread func to terminate.
	pthread_mutex_t pmutex;
	pthread_mutex_init(&pmutex, NULL); //(mutex, attributes)
	pthread_mutex_lock(&pmutex);
	pthread_mutex_trylock(&pmutex); // Returns 0 if successful else -1
	pthread_mutex_unlock(&pmutex);
	pthread_mutex_destroy(&pmutex);
	pthread_cond_t pcond;
	pthread_cond_init(&pcond, NULL); //(thread_cond, attributes)
	pthread_cond_signal(&pcond); // Mutex unlock to be done after this so that cond_wait comes out.
	pthread_cond_wait(&pcond, &pmutex);
	pthread_cond_broadcast(&pcond); // If more than one thread is in wait state.
	pthread_cond_destroy(&pcond);
	sem_t psem;
	sem_init(&psem, 0, 1); //(semaphore, shared across process or not, count)
	sem_wait(&psem);
	sem_post(&psem);
	sem_destroy(&psem);


IPC Mechanisms:
	Signals: 
		Signals are one of the oldest inter-process communication methods used by Unix TM systems. They are used to signal asynchronous events to one or more processes. A signal could be generated by a keyboard interrupt or an error condition such as the process attempting to access a non-existent location in its virtual memory. Signals are also used by the shells to signal job control commands to their child processes.

		Linux implements signals using information stored in the task_struct for the process. The number of supported signals is limited to the word size of the processor. Processes with a word size of 32 bits can have 32 signals whereas 64 bit processors like the Alpha AXP may have up to 64 signals. The currently pending signals are kept in the signal field with a mask of blocked signals held in blocked. With the exception of SIGSTOP and SIGKILL, all signals can be blocked. If a blocked signal is generated, it remains pending until it is unblocked. Linux also holds information about how each process handles every possible signal and this is held in an array of sigaction data structures pointed at by the task_struct for each process. Amongst other things it contains either the address of a routine that will handle the signal or a flag which tells Linux that the process either wishes to ignore this signal or let the kernel handle the signal for it. The process modifies the default signal handling by making system calls and these calls alter the sigaction for the appropriate signal as well as the blocked mask.

	Pipes:
		In Linux, a pipe is implemented using two file data structures which both point at the same temporary VFS inode which itself points at a physical page within memory. Each file data structure contains pointers to different file operation routine vectors; one for writing to the pipe, the other for reading from the pipe.

		This hides the underlying differences from the generic system calls which read and write to ordinary files. As the writing process writes to the pipe, bytes are copied into the shared data page and when the reading process reads from the pipe, bytes are copied from the shared data page. Linux must synchronize access to the pipe. It must make sure that the reader and the writer of the pipe are in step and to do this it uses locks, wait queues and signals.


	Sockets: Interprocess and Intersystem communications
	System V IPC mechanisms:
		Shared/named Semaphores:
	Shared memory:
		Message queues:

Locking mechanisms:
	Spinlock:
	Mutex:
	Read-Write locks:
	Futexes: Fast user space mutex.


Data race:
A data race is a concurrency bug that occurs when multiple threads access the same memory location at the same time, and at least one of the accesses is a write.

Why pthread_cond_wait needs to have a while loop check?

Process/Thread affinity:
	It is the process of binding a thread or process to a specific CPU or set of CPUs. This allows the process to only run on the designated CPUs.
	On Linux, the CPU affinity of a process can be altered with the taskset(1) program and the sched_setaffinity(2) system call. The affinity of a thread can be altered with one of the library functions: pthread_setaffinity_np(3) or pthread_attr_setaffinity_np(3).